{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"apache/httpd-on-centos/","text":"Configure firewalld to Allow Apache Traffic In a standard installation, CentOS 7 is set to prevent traffic to Apache. Normal web traffic uses the http protocol on Port 80, while encrypted web traffic uses the https protocol, on Port 443. To get the active zones of apache server firewall-cmd --get-active-zones Modify your firewall to allow connections on these ports using the following commands: sudo firewall-cmd \u2013\u2013permanent \u2013\u2013add-port=80/tcp sudo firewall-cmd \u2013\u2013permanent \u2013\u2013add-port=443/tcp Once these complete successfully, reload the firewall to apply the changes with the command: sudo firewall-cmd \u2013\u2013reload This is going to help if the port is closed due to some unnecessary issue.","title":"Httpd on centos"},{"location":"apache/jvm-keystore/","text":"https://ordina-jworks.github.io/security/2019/08/14/Using-Lets-Encrypt-Certificates-In-Java.html","title":"Jvm keystore"},{"location":"bash/","text":"Bash Programming Outline Getting Started with Bash Introduction to Bash scripting: https://linuxconfig.org/bash-scripting-tutorial-for-beginners Bash basics: https://tldp.org/LDP/Bash-Beginners-Guide/html/ Bash scripting cheatsheet: https://devhints.io/bash Variables and Operators in Bash: Variables and data types in Bash: https://linuxize.com/post/bash-variables/ Arithmetic Operators in Bash: https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html Comparison Operators in Bash: https://www.tldp.org/LDP/abs/html/comparison-ops.html Bash Scripting Control Structures: If-else statements in Bash: https://www.howtogeek.com/307665/how-to-write-if-else-statements-in-bash-shell-script/ Loops in Bash: https://www.cyberciti.biz/faq/bash-for-loop/ Switch statement in Bash: https://linuxize.com/post/bash-case-statement/ Bash Scripting Functions: Functions in Bash: https://www.shellscript.sh/functions.html Bash function parameters: https://linuxize.com/post/bash-functions/#function-parameters Bash command substitution: https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html Bash Scripting Best Practices: Shellcheck: https://www.shellcheck.net/ Bash Style Guide: https://google.github.io/styleguide/shellguide.html Bash Debugging: https://www.linux.com/topic/desktop/debugging-bash-scripts-beginners-guide/ Advanced Bash Scripting: Regular expressions in Bash: https://www.regular-expressions.info/posixbrackets.html Bash command line arguments: https://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html Bash Scripting Examples: https://www.cyberciti.biz/tips/category/bash NB : This outline is generated by chatGPT-4","title":"Bash Programming Outline"},{"location":"bash/#bash-programming-outline","text":"","title":"Bash Programming Outline"},{"location":"bash/#getting-started-with-bash","text":"Introduction to Bash scripting: https://linuxconfig.org/bash-scripting-tutorial-for-beginners Bash basics: https://tldp.org/LDP/Bash-Beginners-Guide/html/ Bash scripting cheatsheet: https://devhints.io/bash","title":"Getting Started with Bash"},{"location":"bash/#variables-and-operators-in-bash","text":"Variables and data types in Bash: https://linuxize.com/post/bash-variables/ Arithmetic Operators in Bash: https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html Comparison Operators in Bash: https://www.tldp.org/LDP/abs/html/comparison-ops.html","title":"Variables and Operators in Bash:"},{"location":"bash/#bash-scripting-control-structures","text":"If-else statements in Bash: https://www.howtogeek.com/307665/how-to-write-if-else-statements-in-bash-shell-script/ Loops in Bash: https://www.cyberciti.biz/faq/bash-for-loop/ Switch statement in Bash: https://linuxize.com/post/bash-case-statement/","title":"Bash Scripting Control Structures:"},{"location":"bash/#bash-scripting-functions","text":"Functions in Bash: https://www.shellscript.sh/functions.html Bash function parameters: https://linuxize.com/post/bash-functions/#function-parameters Bash command substitution: https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html","title":"Bash Scripting Functions:"},{"location":"bash/#bash-scripting-best-practices","text":"Shellcheck: https://www.shellcheck.net/ Bash Style Guide: https://google.github.io/styleguide/shellguide.html Bash Debugging: https://www.linux.com/topic/desktop/debugging-bash-scripts-beginners-guide/","title":"Bash Scripting Best Practices:"},{"location":"bash/#advanced-bash-scripting","text":"Regular expressions in Bash: https://www.regular-expressions.info/posixbrackets.html Bash command line arguments: https://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html Bash Scripting Examples: https://www.cyberciti.biz/tips/category/bash NB : This outline is generated by chatGPT-4","title":"Advanced Bash Scripting:"},{"location":"database/sqlite3/","text":"Python SQLite Cheat-Sheet SQLite3 is a very easy to use database engine. It is self-contained, serverless, zero-configuration and transactional. It is very fast and lightweight, and the entire database is stored in a single disk file. It is used in a lot of applications as internal data storage. The Python Standard Library includes a module called \"sqlite3\" intended for working with this database. This module is a SQL interface compliant with the DB-API 2.0 specification. Table of Contents - Python SQLite Cheat-Sheet - Import SQLite Module - Connect and Create Database - Creating ( CREATE ) and Deleting ( DROP ) Tables - Inserting ( INSERT ) Data into the Database - Get Last Row ID - Retrieving Data ( SELECT ) from Database - Updating ( UPDATE ) and Deleting ( DELETE ) Data - Using SQLite Transactions - SQLite Database Exceptions - Check Integrity Error - SQLite Row Factory and Data Types Import SQLite Module import random import sqlite3 Connect and Create Database We use the function sqlite3.connect to connect to the database. We can use the argument :memory: to create a temporary DB in the RAM or pass the name of a file to open or create it. # create database in memory # db = sqlite3.connect(':memory:') # create database into directory db = sqlite3.connect(\"./data/test.db\") # get a cursor object cursor = db.cursor() Creating ( CREATE ) and Deleting ( DROP ) Tables In order to make any operation with the database we need to get a cursor object and pass the SQL statements to the cursor object to execute them. Finally it is necessary to commit the changes. We are going to create a users table with name, phone, email and password columns. # DROP TABLE cursor.execute(\"\"\"DROP TABLE IF EXISTS users\"\"\") # CREATE TABLE cursor.execute( \"\"\"CREATE TABLE IF NOT EXISTS users( id INTEGER PRIMARY KEY, name TEXT, phone TEXT, email TEXT unique, password TEXT )\"\"\" ) db.commit() Inserting ( INSERT ) Data into the Database To insert data we use the cursor to execute the query. If you need values from Python variables it is recommended to use the \"?\" placeholder. Never use string operations or concatenation to make your queries because is very insecure. In this example we are going to insert two users in the database, their information is stored in python variables. name = 'Halim' phone = \"01234567890\" email = \"halim@email.com\" password = \"ha1234\" cursor.execute( \"\"\"INSERT INTO users(name, phone, email, password) VALUES (?,?,?,?)\"\"\", (name, phone, email, password), ) db.commit() The values of the Python variables are passed inside a tuple. Another way to do this is passing a dictionary using the :key name placeholder: name = \"Alim\" phone = \"01234567890\" email = \"alim@email.com\" password = \"al1234\" cursor.execute( \"\"\"INSERT INTO users(name, phone, email, password) VALUES (:name, :phone, :email, :password)\"\"\", { \"name\": name, \"phone\": phone, \"email\": email, \"password\": password, }, ) db.commit() # use list of users for inserting multiple user info users = [ ( \"Name \" + str(i), str(random.randint(10000000, 1000000000)), \"name\" + str(i) + \"@email.com\", str(random.randint(10000, 90000)), ) for i in range(10) ] cursor.executemany( \"\"\"INSERT INTO users(name, phone, email, password) VALUES (?, ?, ?, ?)\"\"\", users ) db.commit() Get Last Row ID If you need to get the id of the row you just inserted use lastrowid print(f\"last row id: {cursor.lastrowid}\") Retrieving Data ( SELECT ) from Database To retrieve data, execute the query against the cursor object and then use fetchone() to retrieve a single row or fetchall() to retrieve all the rows and fetchmany() to retrieve a particular number or rows. (note: retrieve rows fetched as a list where each row as a tuple) cursor.execute(\"\"\"SELECT name, phone, email FROM users\"\"\") user1 = cursor.fetchone() print(user1) user_many = cursor.fetchmany(5) print(user_many) user_all = cursor.fetchall() print(user_all) The cursor object works as an iterator, invoking fetchall() automatically cursor.execute(\"\"\"SELECT name, email, phone FROM users\"\"\") for row in cursor: print(f\"name: {row[0]} email: {row[1]} phone: {row[2]}\") To retrieve data with conditions, use again the \"?\" placeholder user_id = 5 cursor.execute(\"\"\"SELECT name, email, phone FROM users WHERE id=?\"\"\", (user_id,)) print(cursor.fetchone()) Updating ( UPDATE ) and Deleting ( DELETE ) Data The procedure to update or delete data is the same as inserting data # update user phone with id = 5 cursor.execute(\"\"\"UPDATE users SET phone = ? WHERE id = ?\"\"\", (\"01710567890\", user_id)) db.commit() # delete user row with id = 8 cursor.execute(\"\"\"DELETE FROM users WHERE id = ?\"\"\", (8,)) db.commit() Using SQLite Transactions Transactions are an useful property of the database systems. It ensures the atomicity of the Database. Use commit() method to save the changes and rollback() method to roll back any change to the database since the last call to commit. # update user phone with id = 5 cursor.execute(\"\"\"UPDATE users SET phone = ? WHERE id = ?\"\"\", (\"01712567890\", user_id)) db.rollback() Please remember to always call commit to save the changes. If you close the connection using close or the connection to the file is lost (maybe the program finishes unexpectedly), not committed changes will be lost. SQLite Database Exceptions For best practices always surround the database operations with a try clause or a context manager. try: # create or connect database db = sqlite3.connect(\"./data/test.db\") # get a cursor object cursor = db.cursor() # check if a table 'users' does exist or not and create it cursor.execute( \"\"\"CREATE TABLE IF NOT EXISTS users(id INTEGER PRIMARY KEY, name TEXT, phone TEXT, email TEXT unique, password TEXT)\"\"\" ) # commit to save the changes db.commit() except Exception as e: # rollback any change if something goes wrong db.rollback() raise e finally: db.close() Check Integrity Error We can use the Connection object as context manager to automatically commit or rollback transactions name1 = \"Mobarak\" phone1 = \"3366858\" email1 = \"imshakil@github.com\" # A very secure password password1 = \"12345\" try: db = sqlite3.connect(\"./data/test.db\") with db: db.execute( \"\"\"INSERT INTO users (name, phone, email, password) VALUES (?, ?, ?, ?)\"\"\", (name1, phone1, email1, password1), ) except sqlite3.IntegrityError: print(\"Data already exists\") finally: db.close() In the example above if the insert statement raises an exception, the transaction will be rolled back and the message gets printed; otherwise the transaction will be committed. Please note that we call execute on the db object, not the cursor object. SQLite Row Factory and Data Types The following table shows the relation between SQLite datatypes and Python datatypes: None type is converted to NULL int type is converted to INTEGER float type is converted to REAL str type is converted to TEXT bytes type is converted to BLOB The row factory class sqlite3.Row is used to access the columns of a query by name instead of by index. db = sqlite3.connect(\"./data/test.db\") db.row_factory = sqlite3.Row cursor = db.cursor() cursor.execute(\"\"\"SELECT name, email, phone FROM users\"\"\") for row in cursor: print(f\"name : {row[0]}, email: {row[1]}, phone: {row[2]}\") # close database connection db.close() Thanks to Andres Torres for awesome blog post Source: https://www.pythoncentral.io/introduction-to-sqlite-in-python/","title":"Python SQLite Cheat-Sheet"},{"location":"database/sqlite3/#python-sqlite-cheat-sheet","text":"SQLite3 is a very easy to use database engine. It is self-contained, serverless, zero-configuration and transactional. It is very fast and lightweight, and the entire database is stored in a single disk file. It is used in a lot of applications as internal data storage. The Python Standard Library includes a module called \"sqlite3\" intended for working with this database. This module is a SQL interface compliant with the DB-API 2.0 specification. Table of Contents - Python SQLite Cheat-Sheet - Import SQLite Module - Connect and Create Database - Creating ( CREATE ) and Deleting ( DROP ) Tables - Inserting ( INSERT ) Data into the Database - Get Last Row ID - Retrieving Data ( SELECT ) from Database - Updating ( UPDATE ) and Deleting ( DELETE ) Data - Using SQLite Transactions - SQLite Database Exceptions - Check Integrity Error - SQLite Row Factory and Data Types","title":"Python SQLite Cheat-Sheet"},{"location":"database/sqlite3/#import-sqlite-module","text":"import random import sqlite3","title":"Import SQLite Module"},{"location":"database/sqlite3/#connect-and-create-database","text":"We use the function sqlite3.connect to connect to the database. We can use the argument :memory: to create a temporary DB in the RAM or pass the name of a file to open or create it. # create database in memory # db = sqlite3.connect(':memory:') # create database into directory db = sqlite3.connect(\"./data/test.db\") # get a cursor object cursor = db.cursor()","title":"Connect and Create Database"},{"location":"database/sqlite3/#creating-create-and-deleting-drop-tables","text":"In order to make any operation with the database we need to get a cursor object and pass the SQL statements to the cursor object to execute them. Finally it is necessary to commit the changes. We are going to create a users table with name, phone, email and password columns. # DROP TABLE cursor.execute(\"\"\"DROP TABLE IF EXISTS users\"\"\") # CREATE TABLE cursor.execute( \"\"\"CREATE TABLE IF NOT EXISTS users( id INTEGER PRIMARY KEY, name TEXT, phone TEXT, email TEXT unique, password TEXT )\"\"\" ) db.commit()","title":"Creating (CREATE) and Deleting (DROP) Tables"},{"location":"database/sqlite3/#inserting-insert-data-into-the-database","text":"To insert data we use the cursor to execute the query. If you need values from Python variables it is recommended to use the \"?\" placeholder. Never use string operations or concatenation to make your queries because is very insecure. In this example we are going to insert two users in the database, their information is stored in python variables. name = 'Halim' phone = \"01234567890\" email = \"halim@email.com\" password = \"ha1234\" cursor.execute( \"\"\"INSERT INTO users(name, phone, email, password) VALUES (?,?,?,?)\"\"\", (name, phone, email, password), ) db.commit() The values of the Python variables are passed inside a tuple. Another way to do this is passing a dictionary using the :key name placeholder: name = \"Alim\" phone = \"01234567890\" email = \"alim@email.com\" password = \"al1234\" cursor.execute( \"\"\"INSERT INTO users(name, phone, email, password) VALUES (:name, :phone, :email, :password)\"\"\", { \"name\": name, \"phone\": phone, \"email\": email, \"password\": password, }, ) db.commit() # use list of users for inserting multiple user info users = [ ( \"Name \" + str(i), str(random.randint(10000000, 1000000000)), \"name\" + str(i) + \"@email.com\", str(random.randint(10000, 90000)), ) for i in range(10) ] cursor.executemany( \"\"\"INSERT INTO users(name, phone, email, password) VALUES (?, ?, ?, ?)\"\"\", users ) db.commit()","title":"Inserting (INSERT) Data into the Database"},{"location":"database/sqlite3/#get-last-row-id","text":"If you need to get the id of the row you just inserted use lastrowid print(f\"last row id: {cursor.lastrowid}\")","title":"Get Last Row ID"},{"location":"database/sqlite3/#retrieving-data-select-from-database","text":"To retrieve data, execute the query against the cursor object and then use fetchone() to retrieve a single row or fetchall() to retrieve all the rows and fetchmany() to retrieve a particular number or rows. (note: retrieve rows fetched as a list where each row as a tuple) cursor.execute(\"\"\"SELECT name, phone, email FROM users\"\"\") user1 = cursor.fetchone() print(user1) user_many = cursor.fetchmany(5) print(user_many) user_all = cursor.fetchall() print(user_all) The cursor object works as an iterator, invoking fetchall() automatically cursor.execute(\"\"\"SELECT name, email, phone FROM users\"\"\") for row in cursor: print(f\"name: {row[0]} email: {row[1]} phone: {row[2]}\") To retrieve data with conditions, use again the \"?\" placeholder user_id = 5 cursor.execute(\"\"\"SELECT name, email, phone FROM users WHERE id=?\"\"\", (user_id,)) print(cursor.fetchone())","title":"Retrieving Data (SELECT) from Database"},{"location":"database/sqlite3/#updating-update-and-deleting-delete-data","text":"The procedure to update or delete data is the same as inserting data # update user phone with id = 5 cursor.execute(\"\"\"UPDATE users SET phone = ? WHERE id = ?\"\"\", (\"01710567890\", user_id)) db.commit() # delete user row with id = 8 cursor.execute(\"\"\"DELETE FROM users WHERE id = ?\"\"\", (8,)) db.commit()","title":"Updating (UPDATE) and Deleting (DELETE) Data"},{"location":"database/sqlite3/#using-sqlite-transactions","text":"Transactions are an useful property of the database systems. It ensures the atomicity of the Database. Use commit() method to save the changes and rollback() method to roll back any change to the database since the last call to commit. # update user phone with id = 5 cursor.execute(\"\"\"UPDATE users SET phone = ? WHERE id = ?\"\"\", (\"01712567890\", user_id)) db.rollback() Please remember to always call commit to save the changes. If you close the connection using close or the connection to the file is lost (maybe the program finishes unexpectedly), not committed changes will be lost.","title":"Using SQLite Transactions"},{"location":"database/sqlite3/#sqlite-database-exceptions","text":"For best practices always surround the database operations with a try clause or a context manager. try: # create or connect database db = sqlite3.connect(\"./data/test.db\") # get a cursor object cursor = db.cursor() # check if a table 'users' does exist or not and create it cursor.execute( \"\"\"CREATE TABLE IF NOT EXISTS users(id INTEGER PRIMARY KEY, name TEXT, phone TEXT, email TEXT unique, password TEXT)\"\"\" ) # commit to save the changes db.commit() except Exception as e: # rollback any change if something goes wrong db.rollback() raise e finally: db.close()","title":"SQLite Database Exceptions"},{"location":"database/sqlite3/#check-integrity-error","text":"We can use the Connection object as context manager to automatically commit or rollback transactions name1 = \"Mobarak\" phone1 = \"3366858\" email1 = \"imshakil@github.com\" # A very secure password password1 = \"12345\" try: db = sqlite3.connect(\"./data/test.db\") with db: db.execute( \"\"\"INSERT INTO users (name, phone, email, password) VALUES (?, ?, ?, ?)\"\"\", (name1, phone1, email1, password1), ) except sqlite3.IntegrityError: print(\"Data already exists\") finally: db.close() In the example above if the insert statement raises an exception, the transaction will be rolled back and the message gets printed; otherwise the transaction will be committed. Please note that we call execute on the db object, not the cursor object.","title":"Check Integrity Error"},{"location":"database/sqlite3/#sqlite-row-factory-and-data-types","text":"The following table shows the relation between SQLite datatypes and Python datatypes: None type is converted to NULL int type is converted to INTEGER float type is converted to REAL str type is converted to TEXT bytes type is converted to BLOB The row factory class sqlite3.Row is used to access the columns of a query by name instead of by index. db = sqlite3.connect(\"./data/test.db\") db.row_factory = sqlite3.Row cursor = db.cursor() cursor.execute(\"\"\"SELECT name, email, phone FROM users\"\"\") for row in cursor: print(f\"name : {row[0]}, email: {row[1]}, phone: {row[2]}\") # close database connection db.close() Thanks to Andres Torres for awesome blog post Source: https://www.pythoncentral.io/introduction-to-sqlite-in-python/","title":"SQLite Row Factory and Data Types"},{"location":"database/opendj/Connect-internal-LDAP-server-in-LDAP-browser/","text":"This doc will help to connect your internal(VM) LDAP server to any LDAP browser (jx explorer, Apache Directory). Basically, I have installed an application with LDAP server in my Virtual Machine (vmware). After then, I was trying to connect that internal ldap server to Apache Directory in my Host Computer. Thoug I could access application server through my browser, but could not able to make connection of the ldap server into the Apache Directory. Later I found this solution that is the port of that ldap server was not able to communicate with my host computer even after adding that port into the firewall. Actually we have to create a tunnel of the ssh server to connect that port. LDAP server info bind dn: cn=admin/directory manager server address: localhost/ip:port server password: password In my case it is: bind dn: cn=directory manager server address: localhost:1636 password: password Install openssh-server Make sure that both side of the machine (host computer and VM) have installed the openssh-server . To install openssh server: sudo apt install openssh-server To check the ssh status: sudo service ssh status Configure SSH We need to configure ssh config file as below: sudo nano /etc/ssh/sshd_config From this file remove # right before PermitRootLogin and replace *-password with yes right after PermitRootLogin Then reload the ssh server: sudo systemctl reload ssh Root login with sudo su - login as a root user. then set a root password with below command: sudo passwd Creating Tunnel To create tunnel: ssh -fNL [port to be used in ldap browser]:ldap server address:ldap server port root@internal ldap server ip address an example: ssh -fNL 5909:localhost:1636 root@172.16.132.129 It may asked a root password just enter the password you have created using sudo passwd . That's all. Connecting LDAP server in Apache Directory Select for a new connection and enter like this accroding to your own ldap server value. Please choose SSL connection if your ldap server has ssl connection. After then enter the bind dn value and ldap server password and finish it. Finally you should see as below if it connect succesfully. Thanks.","title":"Connect internal LDAP server in LDAP browser"},{"location":"database/opendj/Connect-internal-LDAP-server-in-LDAP-browser/#ldap-server-info","text":"bind dn: cn=admin/directory manager server address: localhost/ip:port server password: password In my case it is: bind dn: cn=directory manager server address: localhost:1636 password: password","title":"LDAP server info"},{"location":"database/opendj/Connect-internal-LDAP-server-in-LDAP-browser/#install-openssh-server","text":"Make sure that both side of the machine (host computer and VM) have installed the openssh-server . To install openssh server: sudo apt install openssh-server To check the ssh status: sudo service ssh status","title":"Install openssh-server"},{"location":"database/opendj/Connect-internal-LDAP-server-in-LDAP-browser/#configure-ssh","text":"We need to configure ssh config file as below: sudo nano /etc/ssh/sshd_config From this file remove # right before PermitRootLogin and replace *-password with yes right after PermitRootLogin Then reload the ssh server: sudo systemctl reload ssh","title":"Configure SSH"},{"location":"database/opendj/Connect-internal-LDAP-server-in-LDAP-browser/#root-login","text":"with sudo su - login as a root user. then set a root password with below command: sudo passwd","title":"Root login"},{"location":"database/opendj/Connect-internal-LDAP-server-in-LDAP-browser/#creating-tunnel","text":"To create tunnel: ssh -fNL [port to be used in ldap browser]:ldap server address:ldap server port root@internal ldap server ip address an example: ssh -fNL 5909:localhost:1636 root@172.16.132.129 It may asked a root password just enter the password you have created using sudo passwd . That's all.","title":"Creating Tunnel"},{"location":"database/opendj/Connect-internal-LDAP-server-in-LDAP-browser/#connecting-ldap-server-in-apache-directory","text":"Select for a new connection and enter like this accroding to your own ldap server value. Please choose SSL connection if your ldap server has ssl connection. After then enter the bind dn value and ldap server password and finish it. Finally you should see as below if it connect succesfully. Thanks.","title":"Connecting LDAP server in Apache Directory"},{"location":"database/opendj/basic-config/","text":"","title":"Basic config"},{"location":"database/opendj/dsconfig/","text":"get-global-configuration-prop To get global opendj configuration: /opt/opendj/bin/dsconfig get-global-configuration-prop -p 4444 -X -n -h localhost -D \"cn=directory manager\" -w \"password\" To update global configuration: /opt/opendj/bin/dsconfig set-global-configuration-prop -p 4444 -X -n -h localhost -D \"cn=directory manager\" -w \"password\" --set lookthrough-limit:1000000 It changes default search limit to a maximum number. opendj log-level setting You can do some dsconfig operations on log-publishers as described below: let get log publishers status to see which are enabled: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n list-log-publishers You will get a list of log-publishers: Log Publisher : Type : enabled ------------------------------:------------------------:-------- File-Based Access Logger : file-based-access : true File-Based Audit Logger : file-based-audit : true File-Based Debug Logger : file-based-debug : false File-Based Error Logger : file-based-error : true File-Based HTTP Access Logger : file-based-http-access : false Replication Repair Logger : file-based-error : true To get info of log publisher: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n get-log-publisher-prop --publisher-name \"File-Based Error Logger\" You will get some info about the selected log-publisher: Property : Value(s) ---------------------:--------------------------------------------------------- append : true default-severity : error, notice, warning, info enabled : true log-file : logs/errors log-file-permissions : 640 override-severity : - retention-policy : File Count Retention Policy rotation-policy : 7 Days Time Limit Rotation Policy, Size Limit Rotation : Policy You may want to update default-severity, then: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n --advanced set-log-publisher-prop --publisher-name \"File-Based Error Logger\" --set default-severity:error --set default-severity:warning updated File-Based Error Logger: Property : Value(s) ---------------------:--------------------------------------------------------- append : true default-severity : error, warning enabled : true log-file : logs/errors log-file-permissions : 640 override-severity : - retention-policy : File Count Retention Policy rotation-policy : 7 Days Time Limit Rotation Policy, Size Limit Rotation : Policy To disable access log: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n set-log-publisher-prop --publisher-name \"File-Based Access Logger\" --set enabled:false To disable audit log: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n set-log-publisher-prop --publisher-name \"File-Based Audit Logger\" --set enabled:false Finally, restart opendj for a fresh start.","title":"get-global-configuration-prop"},{"location":"database/opendj/dsconfig/#get-global-configuration-prop","text":"To get global opendj configuration: /opt/opendj/bin/dsconfig get-global-configuration-prop -p 4444 -X -n -h localhost -D \"cn=directory manager\" -w \"password\" To update global configuration: /opt/opendj/bin/dsconfig set-global-configuration-prop -p 4444 -X -n -h localhost -D \"cn=directory manager\" -w \"password\" --set lookthrough-limit:1000000 It changes default search limit to a maximum number.","title":"get-global-configuration-prop"},{"location":"database/opendj/dsconfig/#opendj-log-level-setting","text":"You can do some dsconfig operations on log-publishers as described below: let get log publishers status to see which are enabled: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n list-log-publishers You will get a list of log-publishers: Log Publisher : Type : enabled ------------------------------:------------------------:-------- File-Based Access Logger : file-based-access : true File-Based Audit Logger : file-based-audit : true File-Based Debug Logger : file-based-debug : false File-Based Error Logger : file-based-error : true File-Based HTTP Access Logger : file-based-http-access : false Replication Repair Logger : file-based-error : true To get info of log publisher: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n get-log-publisher-prop --publisher-name \"File-Based Error Logger\" You will get some info about the selected log-publisher: Property : Value(s) ---------------------:--------------------------------------------------------- append : true default-severity : error, notice, warning, info enabled : true log-file : logs/errors log-file-permissions : 640 override-severity : - retention-policy : File Count Retention Policy rotation-policy : 7 Days Time Limit Rotation Policy, Size Limit Rotation : Policy You may want to update default-severity, then: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n --advanced set-log-publisher-prop --publisher-name \"File-Based Error Logger\" --set default-severity:error --set default-severity:warning updated File-Based Error Logger: Property : Value(s) ---------------------:--------------------------------------------------------- append : true default-severity : error, warning enabled : true log-file : logs/errors log-file-permissions : 640 override-severity : - retention-policy : File Count Retention Policy rotation-policy : 7 Days Time Limit Rotation Policy, Size Limit Rotation : Policy To disable access log: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n set-log-publisher-prop --publisher-name \"File-Based Access Logger\" --set enabled:false To disable audit log: /opt/opendj/bin/dsconfig -h localhost -p 4444 -D \"cn=directory manager\" -w \"password\" -X -n set-log-publisher-prop --publisher-name \"File-Based Audit Logger\" --set enabled:false Finally, restart opendj for a fresh start.","title":"opendj log-level setting"},{"location":"database/opendj/export-import/","text":"Export data to export data into /opt/opendj/backup.ldiff file, change pwd with password : /opt/opendj/bin/export-ldif --hostname \"localhost\" --port 4444 --bindDN \"cn=Directory manager\" --bindPassword \"pwd\" --backendID userRoot --ldifFile ./backup.ldiff --trustAll to export data into /opt/opendj/backup.ldiff file, create password file as a .pw : /opt/opendj/bin/export-ldif --hostname \"localhost\" --port 4444 --bindDN \"cn=Directory manager\" --bindPasswordFile /root/.pw --backendID userRoot --ldifFile ./backup.ldiff --trustAll to export while offline: /opt/opendj/bin/stop-ds /opt/opendj/bin/export-ldif -n userRoot --offline -l filename.ldif /opt/opendj/bin/start-ds Import Data to import data into /opt/opendj/backup.ldiff file, change pwd with password : /opt/opendj/bin/import-ldif --hostname \"localhost\" --port 4444 --bindDN \"cn=Directory manager\" --bindPassword \"pwd\" --backendID userRoot --ldifFile ./backup.ldiff --trustAll","title":"Export data"},{"location":"database/opendj/export-import/#export-data","text":"to export data into /opt/opendj/backup.ldiff file, change pwd with password : /opt/opendj/bin/export-ldif --hostname \"localhost\" --port 4444 --bindDN \"cn=Directory manager\" --bindPassword \"pwd\" --backendID userRoot --ldifFile ./backup.ldiff --trustAll to export data into /opt/opendj/backup.ldiff file, create password file as a .pw : /opt/opendj/bin/export-ldif --hostname \"localhost\" --port 4444 --bindDN \"cn=Directory manager\" --bindPasswordFile /root/.pw --backendID userRoot --ldifFile ./backup.ldiff --trustAll to export while offline: /opt/opendj/bin/stop-ds /opt/opendj/bin/export-ldif -n userRoot --offline -l filename.ldif /opt/opendj/bin/start-ds","title":"Export data"},{"location":"database/opendj/export-import/#import-data","text":"to import data into /opt/opendj/backup.ldiff file, change pwd with password : /opt/opendj/bin/import-ldif --hostname \"localhost\" --port 4444 --bindDN \"cn=Directory manager\" --bindPassword \"pwd\" --backendID userRoot --ldifFile ./backup.ldiff --trustAll","title":"Import Data"},{"location":"database/opendj/ldapsearch/","text":"To count total users in opendj backends: /opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w <password> -b 'o=gluu' 'oxAuthGrantId=*' dn | grep 'dn:' | wc -l To Find a specific user using its uid : /opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w \"password\" -b 'o=gluu' \"(uid=admin)\"","title":"To count total users in opendj backends:"},{"location":"database/opendj/ldapsearch/#to-count-total-users-in-opendj-backends","text":"/opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w <password> -b 'o=gluu' 'oxAuthGrantId=*' dn | grep 'dn:' | wc -l","title":"To count total users in opendj backends:"},{"location":"database/opendj/ldapsearch/#to-find-a-specific-user-using-its-uid","text":"/opt/opendj/bin/ldapsearch -h localhost -p 1636 -Z -X -D \"cn=directory manager\" -w \"password\" -b 'o=gluu' \"(uid=admin)\"","title":"To Find a specific user using its uid:"},{"location":"devops/docker/","text":"","title":"Docker"},{"location":"devops/kubernetes/","text":"","title":"Kubernetes"},{"location":"gpg-key/commit-signature-verification/","text":"To install gnupg sudo apt-get install gnupg To Generate gpg key with details gpg --full-generate-key TO display text format public key gpg --armor --export [email-id/key] > gpg.key cat gpg.key Add this key into github To know the process about \"how to add GPG key in github?\" please follow this link: https://medium.com/big0one/how-to-create-a-verified-commit-in-github-using-gpg-key-signature-16acee004e0f Add this key into local git client $ git config --global user.signingkey [secret-key] $ git config --global commit.gpgsign true $ git config --global gpg.program $(which gpg) To find secret key $ gpg --list-secret-keys --keyid-format=long After then choose the secret key formatted as rsa.../secret key Commit Signature Verification git commit -S -m \"msg\"","title":"To install gnupg"},{"location":"gpg-key/commit-signature-verification/#to-install-gnupg","text":"sudo apt-get install gnupg","title":"To install gnupg"},{"location":"gpg-key/commit-signature-verification/#to-generate-gpg-key-with-details","text":"gpg --full-generate-key","title":"To Generate gpg key with details"},{"location":"gpg-key/commit-signature-verification/#to-display-text-format-public-key","text":"gpg --armor --export [email-id/key] > gpg.key cat gpg.key","title":"TO display text format public key"},{"location":"gpg-key/commit-signature-verification/#add-this-key-into-github","text":"To know the process about \"how to add GPG key in github?\" please follow this link: https://medium.com/big0one/how-to-create-a-verified-commit-in-github-using-gpg-key-signature-16acee004e0f","title":"Add this key into github"},{"location":"gpg-key/commit-signature-verification/#add-this-key-into-local-git-client","text":"$ git config --global user.signingkey [secret-key] $ git config --global commit.gpgsign true $ git config --global gpg.program $(which gpg)","title":"Add this key into local git client"},{"location":"gpg-key/commit-signature-verification/#to-find-secret-key","text":"$ gpg --list-secret-keys --keyid-format=long After then choose the secret key formatted as rsa.../secret key","title":"To find secret key"},{"location":"gpg-key/commit-signature-verification/#commit-signature-verification","text":"git commit -S -m \"msg\"","title":"Commit Signature Verification"},{"location":"linux/linux-command/","text":"Basic Linux Commands Cheat-Sheet This list includes a bunch of different commands that are useful to know when working with Linux. Not all of these commands are covered in the videos, so feel free to investigate them on your own. Managing files and directories cd directory: changes the current working directory to the specified one pwd : prints the current working directory ls : lists the contents of the current directory ls directory: lists the contents of the received directory ls -l : lists the additional information for the contents of the directory ls -a : lists all files, including those hidden ls -la : applies both the -l and the -a flags mkdir directory: creates the directory with the received name rmdir directory: deletes the directory with the received name (if empty) cp old_name new_name: copies old_name into new_name mv old_name new_name: moves old_name into new_name touch file_name: creates an empty file or updates the modified time if it exists chmod modifiers files: changes the permissions for the files according to the provided modifiers; we've seen +x to make the file executable chown user files: changes the owner of the files to the given user chgrp group files: changes the group of the files to the given group Operating with the content of files cat file: shows the content of the file through standard output wc file: counts the amount of characters, words, and lines in the given file; can also count the same values of whatever it receives via stdin file file: prints the type of the given file, as recognized by the operating system head file: shows the first 10 lines of the given file tail file: shows the last 10 lines of the given file less file: scrolls through the contents of the given file (press \"q\" to quit) sort file: sorts the lines of the file alphabetically cut -dseparator -ffields file: for each line in the given file, splits the line according to the given separator and prints the given fields (starting from 1) Additional commands echo \"message\" : prints the message to standard output date : prints the current date who : prints the list of users currently logged into the computer man command: shows the manual page of the given command; manual pages contain a lot of information explaining how to use each command (press \"q\" to quit) uptime : shows how long the computer has been running free : shows the amount of unused memory on the current system","title":"Basic Linux Commands Cheat-Sheet"},{"location":"linux/linux-command/#basic-linux-commands-cheat-sheet","text":"This list includes a bunch of different commands that are useful to know when working with Linux. Not all of these commands are covered in the videos, so feel free to investigate them on your own.","title":"Basic Linux Commands Cheat-Sheet"},{"location":"linux/linux-command/#managing-files-and-directories","text":"cd directory: changes the current working directory to the specified one pwd : prints the current working directory ls : lists the contents of the current directory ls directory: lists the contents of the received directory ls -l : lists the additional information for the contents of the directory ls -a : lists all files, including those hidden ls -la : applies both the -l and the -a flags mkdir directory: creates the directory with the received name rmdir directory: deletes the directory with the received name (if empty) cp old_name new_name: copies old_name into new_name mv old_name new_name: moves old_name into new_name touch file_name: creates an empty file or updates the modified time if it exists chmod modifiers files: changes the permissions for the files according to the provided modifiers; we've seen +x to make the file executable chown user files: changes the owner of the files to the given user chgrp group files: changes the group of the files to the given group","title":"Managing files and directories"},{"location":"linux/linux-command/#operating-with-the-content-of-files","text":"cat file: shows the content of the file through standard output wc file: counts the amount of characters, words, and lines in the given file; can also count the same values of whatever it receives via stdin file file: prints the type of the given file, as recognized by the operating system head file: shows the first 10 lines of the given file tail file: shows the last 10 lines of the given file less file: scrolls through the contents of the given file (press \"q\" to quit) sort file: sorts the lines of the file alphabetically cut -dseparator -ffields file: for each line in the given file, splits the line according to the given separator and prints the given fields (starting from 1)","title":"Operating with the content of files"},{"location":"linux/linux-command/#additional-commands","text":"echo \"message\" : prints the message to standard output date : prints the current date who : prints the list of users currently logged into the computer man command: shows the manual page of the given command; manual pages contain a lot of information explaining how to use each command (press \"q\" to quit) uptime : shows how long the computer has been running free : shows the amount of unused memory on the current system","title":"Additional commands"},{"location":"linux/memory/","text":"To Find All the Process ID top to view memory status of vm machine To Find details of the running services Show all process: ps -e | grep processname Show with full format: ps -f | grep processname Show all together: ps -ef | grep processname Example: ps -ef | grep java To clear Cache, Buffer, Pages, entries sudo su - sync; echo 1/2/3 > /proc/sys/vm/drop_caches","title":"To Find All the Process ID"},{"location":"linux/memory/#to-find-all-the-process-id","text":"top to view memory status of vm machine","title":"To Find All the Process ID"},{"location":"linux/memory/#to-find-details-of-the-running-services","text":"Show all process: ps -e | grep processname Show with full format: ps -f | grep processname Show all together: ps -ef | grep processname Example: ps -ef | grep java","title":"To Find details of the running services"},{"location":"linux/memory/#to-clear-cache-buffer-pages-entries","text":"sudo su - sync; echo 1/2/3 > /proc/sys/vm/drop_caches","title":"To clear Cache, Buffer, Pages, entries"},{"location":"linux/top/","text":"The top command is used to show the active Linux processes. It provides a dynamic real-time view of the running system. Usually, this command shows the summary information of the system and the list of processes or threads which are currently managed by the Linux kernel. Running this command will open an interactive command mode window where the top half portion will contain the statistics of processes and resource usage. The lower half contains a list of the currently running processes. Pressing q will simply exit the command mode. top - 18:27:57 up 5 days, 32 min, 1 user, load average: 2.64, 2.53, 2.05 Tasks: 363 total, 2 running, 313 sleeping, 0 stopped, 0 zombie %Cpu(s): 8.5 us, 1.9 sy, 0.0 ni, 88.7 id, 0.9 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 12228648 total, 1462820 free, 9597568 used, 1168260 buff/cache KiB Swap: 8188 total, 1284 free, 6904 used. 1672064 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 22935 pbmac 20 0 43000 3768 3152 R 11.8 0.0 0:00.04 top 16 root 20 0 0 0 0 S 5.9 0.0 0:08.33 ksoftirqd/1 3478 pbmac 20 0 5135080 476252 77796 S 5.9 3.9 199:36.14 chrome 16330 pbmac 20 0 4974592 149692 17480 S 5.9 1.2 54:41.58 chrome 22890 pbmac 20 0 4792848 125380 82060 S 5.9 1.0 0:02.57 chrome 1 root 20 0 160616 3636 508 S 0.0 0.0 0:28.53 systemd 2 root 20 0 0 0 0 S 0.0 0.0 0:00.06 kthreadd 6 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 mm_percpu_+ 7 root 20 0 0 0 0 S 0.0 0.0 0:08.06 ksoftirqd/0 8 root 20 0 0 0 0 I 0.0 0.0 3:35.28 rcu_sched 9 root 20 0 0 0 0 I 0.0 0.0 0:00.00 rcu_bh 10 root rt 0 0 0 0 S 0.0 0.0 0:00.03 migration/0 11 root rt 0 0 0 0 S 0.0 0.0 0:00.62 watchdog/0 12 root 20 0 0 0 0 S 0.0 0.0 0:00.00 cpuhp/0 13 root 20 0 0 0 0 S 0.0 0.0 0:00.00 cpuhp/1 14 root rt 0 0 0 0 S 0.0 0.0 0:00.55 watchdog/1 15 root rt 0 0 0 0 S 0.0 0.0 0:00.03 migration/1 The columns are labeled: PID: Shows task\u2019s unique process ID. USER: User name of owner of task. PR: Stands for priority of the task. NI: Represents a Nice Value of task. A negative nice value implies higher priority, and positive nice value means lower priority. VIRT: Total virtual memory used by the task. RES: Represents the amount of actual physical memory a process is consuming. SHR: Represents the Shared Memory size (kb) used by a task. S: The state the process is in. %CPU: Represents the CPU usage. %MEM: Shows the Memory usage of task. TIME+: CPU Time, the same as \u2018TIME,\u2019 but reflecting more granularity through hundredths of a second. COMMAND: The command that is being run. Above the list of processes, there's a whole bunch of other useful information. Some of these details may look strange and confusing, but once you take some time to step through each one, you'll see they are very useful stats to pull up in a pinch. The first row contains general system information: top: this is simply the command name...followed by: XX:YY:XX : the time, updated every time the screen updates. up (then X day, YY:ZZ ): the system's uptime, or how much time has passed since the system turned on. load average (then three numbers): the system load over the last one, five, and 15 minutes, respectively. The second row (Tasks) shows information about the running tasks, and it's fairly self-explanatory. It shows the total number of processes and the number of running, sleeping, stopped, and zombie processes. This is literally a sum of the S (state) column described above. The third row (%Cpu(s)) shows the CPU usage separated by types. The data are the values between screen refreshes. The values are: us : user processes sy : system processes ni : nice user processes id : the CPU's idle time; a high idle time means there's not a lot going on otherwise wa : wait time, or time spent waiting for I/O completion hi : time spent waiting for hardware interrupts si : time spent waiting for software interrupts st : \"time stolen from this VM by the hypervisor\" You can collapse the Tasks and %Cpu(s) rows by typing t (for \"toggle\"). The fourth (KiB Mem) and fifth rows (KiB Swap) provide information for memory and swap. These values are: - total - used - free But also: - memory buffers - swap cached Mem","title":"Top"},{"location":"mysql/basic/","text":"","title":"Basic"},{"location":"networking/ip-config/","text":"","title":"Ip config"},{"location":"os/linux/","text":"","title":"Linux"},{"location":"ssh/host-manage/","text":"","title":"Host manage"},{"location":"ssh/port-forwarding/","text":"","title":"Port forwarding"},{"location":"tools/markdown/","text":"Dropdown in markdown Keep Secret by default Want to disclose hidden things? This is your hidden text. code: <details> <summary> Want to disclose hidden things? </summary> <br> This is your hidden text. </details> Disclosed by default Want to hide? This is open by default. Code: <details open> <summary> Want to hide? </summary> <br> This is open by default. </details>","title":"Dropdown in markdown"},{"location":"tools/markdown/#dropdown-in-markdown","text":"","title":"Dropdown in markdown"},{"location":"tools/markdown/#keep-secret-by-default","text":"Want to disclose hidden things? This is your hidden text. code: <details> <summary> Want to disclose hidden things? </summary> <br> This is your hidden text. </details>","title":"Keep Secret by default"},{"location":"tools/markdown/#disclosed-by-default","text":"Want to hide? This is open by default. Code: <details open> <summary> Want to hide? </summary> <br> This is open by default. </details>","title":"Disclosed by default"},{"location":"tools/ngnix/","text":"","title":"Ngnix"}]}