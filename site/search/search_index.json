{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"","title":"About"},{"location":"contact/","text":"","title":"Contact"},{"location":"support/","text":"","title":"Support"},{"location":"apache/","text":"","title":"Apache"},{"location":"apache/httpd-on-centos/","text":"Configure firewalld to Allow Apache Traffic In a standard installation, CentOS 7 is set to prevent traffic to Apache. Normal web traffic uses the http protocol on Port 80, while encrypted web traffic uses the https protocol, on Port 443. To get the active zones of apache server firewall-cmd --get-active-zones Modify your firewall to allow connections on these ports using the following commands: sudo firewall-cmd \u2013\u2013permanent \u2013\u2013add-port=80/tcp sudo firewall-cmd \u2013\u2013permanent \u2013\u2013add-port=443/tcp Once these complete successfully, reload the firewall to apply the changes with the command: sudo firewall-cmd \u2013\u2013reload This is going to help if the port is closed due to some unnecessary issue.","title":"Centos"},{"location":"bash/","text":"Bash Programming Outline Getting Started with Bash Introduction to Bash scripting: https://linuxconfig.org/bash-scripting-tutorial-for-beginners Bash basics: https://tldp.org/LDP/Bash-Beginners-Guide/html/ Bash scripting cheatsheet: https://devhints.io/bash Variables and Operators in Bash: Variables and data types in Bash: https://linuxize.com/post/bash-variables/ Arithmetic Operators in Bash: https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html Comparison Operators in Bash: https://www.tldp.org/LDP/abs/html/comparison-ops.html Bash Scripting Control Structures: If-else statements in Bash: https://www.howtogeek.com/307665/how-to-write-if-else-statements-in-bash-shell-script/ Loops in Bash: https://www.cyberciti.biz/faq/bash-for-loop/ Switch statement in Bash: https://linuxize.com/post/bash-case-statement/ Bash Scripting Functions: Functions in Bash: https://www.shellscript.sh/functions.html Bash function parameters: https://linuxize.com/post/bash-functions/#function-parameters Bash command substitution: https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html Bash Scripting Best Practices: Shellcheck: https://www.shellcheck.net/ Bash Style Guide: https://google.github.io/styleguide/shellguide.html Bash Debugging: https://www.linux.com/topic/desktop/debugging-bash-scripts-beginners-guide/ Advanced Bash Scripting: Regular expressions in Bash: https://www.regular-expressions.info/posixbrackets.html Bash command line arguments: https://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html Bash Scripting Examples: https://www.cyberciti.biz/tips/category/bash NB : This outline is generated by chatGPT-4","title":"Bash Programming Outline"},{"location":"bash/#bash-programming-outline","text":"","title":"Bash Programming Outline"},{"location":"bash/#getting-started-with-bash","text":"Introduction to Bash scripting: https://linuxconfig.org/bash-scripting-tutorial-for-beginners Bash basics: https://tldp.org/LDP/Bash-Beginners-Guide/html/ Bash scripting cheatsheet: https://devhints.io/bash","title":"Getting Started with Bash"},{"location":"bash/#variables-and-operators-in-bash","text":"Variables and data types in Bash: https://linuxize.com/post/bash-variables/ Arithmetic Operators in Bash: https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html Comparison Operators in Bash: https://www.tldp.org/LDP/abs/html/comparison-ops.html","title":"Variables and Operators in Bash:"},{"location":"bash/#bash-scripting-control-structures","text":"If-else statements in Bash: https://www.howtogeek.com/307665/how-to-write-if-else-statements-in-bash-shell-script/ Loops in Bash: https://www.cyberciti.biz/faq/bash-for-loop/ Switch statement in Bash: https://linuxize.com/post/bash-case-statement/","title":"Bash Scripting Control Structures:"},{"location":"bash/#bash-scripting-functions","text":"Functions in Bash: https://www.shellscript.sh/functions.html Bash function parameters: https://linuxize.com/post/bash-functions/#function-parameters Bash command substitution: https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html","title":"Bash Scripting Functions:"},{"location":"bash/#bash-scripting-best-practices","text":"Shellcheck: https://www.shellcheck.net/ Bash Style Guide: https://google.github.io/styleguide/shellguide.html Bash Debugging: https://www.linux.com/topic/desktop/debugging-bash-scripts-beginners-guide/","title":"Bash Scripting Best Practices:"},{"location":"bash/#advanced-bash-scripting","text":"Regular expressions in Bash: https://www.regular-expressions.info/posixbrackets.html Bash command line arguments: https://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html Bash Scripting Examples: https://www.cyberciti.biz/tips/category/bash NB : This outline is generated by chatGPT-4","title":"Advanced Bash Scripting:"},{"location":"bash/script/","text":"","title":"Script"},{"location":"blogs/links/","text":"","title":"Links"},{"location":"linux/","text":"Linux Operating Systems","title":"Linux"},{"location":"linux/#linux-operating-systems","text":"","title":"Linux Operating Systems"},{"location":"linux/linux-command/","text":"","title":"Linux command"},{"location":"linux/memory/","text":"To Find All the Process ID top to view memory status of vm machine To Find details of the running services Show all process: ps -e | grep processname Show with full format: ps -f | grep processname Show all together: ps -ef | grep processname Example: ps -ef | grep java To clear Cache, Buffer, Pages, entries sudo su - sync; echo 1/2/3 > /proc/sys/vm/drop_caches","title":"To Find All the Process ID"},{"location":"linux/memory/#to-find-all-the-process-id","text":"top to view memory status of vm machine","title":"To Find All the Process ID"},{"location":"linux/memory/#to-find-details-of-the-running-services","text":"Show all process: ps -e | grep processname Show with full format: ps -f | grep processname Show all together: ps -ef | grep processname Example: ps -ef | grep java","title":"To Find details of the running services"},{"location":"linux/memory/#to-clear-cache-buffer-pages-entries","text":"sudo su - sync; echo 1/2/3 > /proc/sys/vm/drop_caches","title":"To clear Cache, Buffer, Pages, entries"},{"location":"linux/top/","text":"The top command is used to show the active Linux processes. It provides a dynamic real-time view of the running system. Usually, this command shows the summary information of the system and the list of processes or threads which are currently managed by the Linux kernel. Running this command will open an interactive command mode window where the top half portion will contain the statistics of processes and resource usage. The lower half contains a list of the currently running processes. Pressing q will simply exit the command mode. top - 18:27:57 up 5 days, 32 min, 1 user, load average: 2.64, 2.53, 2.05 Tasks: 363 total, 2 running, 313 sleeping, 0 stopped, 0 zombie %Cpu(s): 8.5 us, 1.9 sy, 0.0 ni, 88.7 id, 0.9 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 12228648 total, 1462820 free, 9597568 used, 1168260 buff/cache KiB Swap: 8188 total, 1284 free, 6904 used. 1672064 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 22935 pbmac 20 0 43000 3768 3152 R 11.8 0.0 0:00.04 top 16 root 20 0 0 0 0 S 5.9 0.0 0:08.33 ksoftirqd/1 3478 pbmac 20 0 5135080 476252 77796 S 5.9 3.9 199:36.14 chrome 16330 pbmac 20 0 4974592 149692 17480 S 5.9 1.2 54:41.58 chrome 22890 pbmac 20 0 4792848 125380 82060 S 5.9 1.0 0:02.57 chrome 1 root 20 0 160616 3636 508 S 0.0 0.0 0:28.53 systemd 2 root 20 0 0 0 0 S 0.0 0.0 0:00.06 kthreadd 6 root 0 -20 0 0 0 I 0.0 0.0 0:00.00 mm_percpu_+ 7 root 20 0 0 0 0 S 0.0 0.0 0:08.06 ksoftirqd/0 8 root 20 0 0 0 0 I 0.0 0.0 3:35.28 rcu_sched 9 root 20 0 0 0 0 I 0.0 0.0 0:00.00 rcu_bh 10 root rt 0 0 0 0 S 0.0 0.0 0:00.03 migration/0 11 root rt 0 0 0 0 S 0.0 0.0 0:00.62 watchdog/0 12 root 20 0 0 0 0 S 0.0 0.0 0:00.00 cpuhp/0 13 root 20 0 0 0 0 S 0.0 0.0 0:00.00 cpuhp/1 14 root rt 0 0 0 0 S 0.0 0.0 0:00.55 watchdog/1 15 root rt 0 0 0 0 S 0.0 0.0 0:00.03 migration/1 The columns are labeled: PID: Shows task\u2019s unique process ID. USER: User name of owner of task. PR: Stands for priority of the task. NI: Represents a Nice Value of task. A negative nice value implies higher priority, and positive nice value means lower priority. VIRT: Total virtual memory used by the task. RES: Represents the amount of actual physical memory a process is consuming. SHR: Represents the Shared Memory size (kb) used by a task. S: The state the process is in. %CPU: Represents the CPU usage. %MEM: Shows the Memory usage of task. TIME+: CPU Time, the same as \u2018TIME,\u2019 but reflecting more granularity through hundredths of a second. COMMAND: The command that is being run. Above the list of processes, there's a whole bunch of other useful information. Some of these details may look strange and confusing, but once you take some time to step through each one, you'll see they are very useful stats to pull up in a pinch. The first row contains general system information: top: this is simply the command name...followed by: XX:YY:XX : the time, updated every time the screen updates. up (then X day, YY:ZZ ): the system's uptime, or how much time has passed since the system turned on. load average (then three numbers): the system load over the last one, five, and 15 minutes, respectively. The second row (Tasks) shows information about the running tasks, and it's fairly self-explanatory. It shows the total number of processes and the number of running, sleeping, stopped, and zombie processes. This is literally a sum of the S (state) column described above. The third row (%Cpu(s)) shows the CPU usage separated by types. The data are the values between screen refreshes. The values are: us : user processes sy : system processes ni : nice user processes id : the CPU's idle time; a high idle time means there's not a lot going on otherwise wa : wait time, or time spent waiting for I/O completion hi : time spent waiting for hardware interrupts si : time spent waiting for software interrupts st : \"time stolen from this VM by the hypervisor\" You can collapse the Tasks and %Cpu(s) rows by typing t (for \"toggle\"). The fourth (KiB Mem) and fifth rows (KiB Swap) provide information for memory and swap. These values are: - total - used - free But also: - memory buffers - swap cached Mem","title":"Commands"},{"location":"networking/ip-config/","text":"","title":"Ip config"},{"location":"os/linux/","text":"","title":"Linux"},{"location":"ssh/host-manage/","text":"","title":"Host manage"},{"location":"ssh/port-forwarding/","text":"","title":"Port forwarding"}]}